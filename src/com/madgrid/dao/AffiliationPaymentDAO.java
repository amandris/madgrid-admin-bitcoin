package com.madgrid.dao;import java.util.List;import java.util.StringTokenizer;import org.apache.ojb.broker.PersistenceBroker;import org.apache.ojb.broker.PersistenceBrokerException;import org.apache.ojb.broker.PersistenceBrokerFactory;import org.apache.ojb.broker.query.Criteria;import org.apache.ojb.broker.query.Query;import org.apache.ojb.broker.query.QueryByCriteria;import com.madgrid.admin.util.Utils;import com.madgrid.model.AffiliationPayment;public class AffiliationPaymentDAO{				public void setAffiliationPayment( AffiliationPayment affiliationPayment)  throws Exception{		PersistenceBroker broker = null;			try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( affiliationPayment);			broker.commitTransaction();		}catch (PersistenceBrokerException ex){			broker.abortTransaction();			throw ex;		}finally {			if (broker != null) {				broker.close();			}		}	}		public void deleteAffiliationPayment( AffiliationPayment affiliationPayment)  throws Exception{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.delete( affiliationPayment);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();						throw ex;		}finally {			if ( broker != null) {				broker.close();			}		}	}		public List<AffiliationPayment> getAffiliationPaymentListByCriteria(Criteria criteria) throws Exception	{		PersistenceBroker broker = null;		try {						Query query = new QueryByCriteria( AffiliationPayment.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return (List<AffiliationPayment>)broker.getCollectionByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw ex;		}finally {			if ( broker != null) {				broker.close();			}		}	}			public List<AffiliationPayment> getAffiliationPaymentListByCriteria(Criteria criteria, String order) throws Exception	{		PersistenceBroker broker = null;		try {						QueryByCriteria query = new QueryByCriteria( AffiliationPayment.class, criteria);						if( !Utils.nullOrBlank(order)){				query.addOrderBy( order, order.startsWith("-")?true:false);			}						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return (List<AffiliationPayment>)broker.getCollectionByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw ex;		}finally {			if ( broker != null) {				broker.close();			}		}	}				public List<AffiliationPayment> getAffiliationPaymentListByCriteriaAndRange(Criteria criteria, String order, int index, int offset) throws Exception	{		PersistenceBroker broker = null;		try {						QueryByCriteria query = new QueryByCriteria( AffiliationPayment.class, criteria);			if( !Utils.nullOrBlank(order)){				StringTokenizer stringTokenizer = new StringTokenizer( order, ",");				while (stringTokenizer.hasMoreElements()){					String token = stringTokenizer.nextToken();					query.addOrderBy( token, token.startsWith("-")?true:false);				}			}						query.setStartAtIndex( index);			query.setEndAtIndex( index + offset);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return (List<AffiliationPayment>)broker.getCollectionByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw ex;		}finally {			if ( broker != null) {				broker.close();			}		}	}			public int getAffiliationPaymentCountByCriteria(Criteria criteria) throws Exception	{		PersistenceBroker broker = null;		try {			Query query = new QueryByCriteria( AffiliationPayment.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCount( query);		}catch ( PersistenceBrokerException ex) {			throw ex;		}finally {			if ( broker != null) {				broker.close();			}		}	}		public AffiliationPayment getAffiliationPaymentById( Integer id) throws Exception	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				if( id.intValue() == 0)			return null;				try {			criteria.addEqualTo		( "id", id);						Query query = new QueryByCriteria( AffiliationPayment.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( AffiliationPayment) broker.getObjectByQuery(query);		}catch ( PersistenceBrokerException ex) {			throw ex;		}finally {			if ( broker != null) {				broker.close();			}		}	}		public AffiliationPayment getAffiliationPaymentByCriteria( Criteria criteria) throws Exception	{		PersistenceBroker 	broker 		= null;		try {			Query query = new QueryByCriteria( AffiliationPayment.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( AffiliationPayment)broker.getObjectByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw ex;		}finally {			if ( broker != null) {				broker.close();			}		}	}	}